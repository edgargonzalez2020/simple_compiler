
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightASSIGNleftORleftANDleftEQUALSNEleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEMODULUSrightPOWERrightUMINUSUPLUSAND ASSIGN COLON COMMA DIVIDE ELSE EQUALS GT GTE ID IF INT INT_LITERAL LBRACKET LPAREN LT LTE MINUS MODULUS NE NOT OR PLUS POWER RBRACKET READ RPAREN SEMICOLON STRING_LITERAL TIMES WHILE WRITEprogram : block_stmtstmt_decl_list : epsilon\n                        | stmt_decl stmt_decl_list_optblock_stmt : LBRACKET stmt_decl_list semicolon_opt RBRACKETstmt_decl_list_opt : epsilon\n                          | stmt_decl_list_opt SEMICOLON stmt_declstmt_decl : stmt\n                 | declerationsemicolon_opt : epsilon\n                     | SEMICOLONdecleration : identifier COLON INT assignment_opttype : INTidentifier : IDexpr : expression\n            | lvaluelvalue : identifier expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression DIVIDE expression\n                  | expression MODULUS expression\n                  | expression TIMES expression\n                  | expression POWER expression\n                  | identifier ASSIGN expression expression : MINUS expression %prec UMINUS\n                   | PLUS expression %prec UPLUSexpression : LPAREN expression RPARENexpression : INT_LITERALexpression : identifierassignment_opt : epsilon\n                      | ASSIGN expressionstmt : block_stmt\n            | expr_stmt\n            | if_stmt\n            | read_stmt\n            | while_stmt\n            | write_stmtexpr_stmt : exprif_stmt : IF expr block_stmt else_optelse_opt : epsilon\n                | ELSE block_stmtread_stmt : READ LPAREN read_opt RPARENread_opt : epsilon\n                | read_opt COMMA lvaluewhile_stmt : WHILE expr block_stmtwrite_stmt : LPAREN write_opt RPARENwrite_opt : epsilon\n                 | expr_string expr_string_optexpr_string_opt : epsilon\n                       | expr_string_opt COMMA expr_stringexpr_string : expr\n                   | STRING_LITERALepsilon :'
    
_lr_action_items = {'LBRACKET':([0,3,21,22,23,26,34,35,44,51,52,53,55,57,63,67,68,69,70,71,72,79,],[3,3,-13,-14,-15,-27,3,-16,3,-25,-28,-24,3,-23,-26,-17,-18,-19,-20,-21,-22,3,]),'$end':([1,2,54,],[0,-1,-4,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,22,23,26,30,31,51,52,53,54,56,57,58,62,63,66,67,68,69,70,71,72,73,74,75,77,78,80,83,84,],[-52,29,-2,-52,-7,-8,-31,-32,-33,-34,-35,-36,-16,-37,-13,-14,-15,-27,55,-5,-25,-28,-24,-4,-52,-23,-52,-45,-26,-44,-17,-18,-19,-20,-21,-22,-6,-11,-29,-38,-39,-41,-30,-40,]),'RBRACKET':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,22,23,26,27,28,29,30,31,51,52,53,54,56,57,58,62,63,66,67,68,69,70,71,72,73,74,75,77,78,80,83,84,],[-52,-52,-2,-52,-7,-8,-31,-32,-33,-34,-35,-36,-16,-37,-13,-14,-15,-27,54,-9,-10,-3,-5,-25,-28,-24,-4,-52,-23,-52,-45,-26,-44,-17,-18,-19,-20,-21,-22,-6,-11,-29,-38,-39,-41,-30,-40,]),'IF':([3,55,],[17,17,]),'READ':([3,55,],[18,18,]),'WHILE':([3,55,],[20,20,]),'LPAREN':([3,17,18,19,20,24,25,33,36,45,46,47,48,49,50,55,76,82,],[19,36,37,36,36,36,36,36,36,36,36,36,36,36,36,19,36,36,]),'ID':([3,17,19,20,24,25,33,36,45,46,47,48,49,50,55,76,81,82,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'MINUS':([3,15,17,19,20,21,22,24,25,26,33,35,36,39,45,46,47,48,49,50,51,52,53,55,57,59,63,67,68,69,70,71,72,76,82,83,],[25,-28,25,25,25,-13,46,25,25,-27,25,-28,25,46,25,25,25,25,25,25,-25,-28,-24,25,46,46,-26,-17,-18,-19,-20,-21,-22,25,25,46,]),'PLUS':([3,15,17,19,20,21,22,24,25,26,33,35,36,39,45,46,47,48,49,50,51,52,53,55,57,59,63,67,68,69,70,71,72,76,82,83,],[24,-28,24,24,24,-13,45,24,24,-27,24,-28,24,45,24,24,24,24,24,24,-25,-28,-24,24,45,45,-26,-17,-18,-19,-20,-21,-22,24,24,45,]),'INT_LITERAL':([3,17,19,20,24,25,33,36,45,46,47,48,49,50,55,76,82,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'COLON':([15,21,],[32,-13,]),'ASSIGN':([15,21,35,52,56,],[33,-13,33,33,76,]),'DIVIDE':([15,21,22,26,35,39,51,52,53,57,59,63,67,68,69,70,71,72,83,],[-28,-13,47,-27,-28,47,-25,-28,-24,47,47,-26,47,47,-19,-20,-21,-22,47,]),'MODULUS':([15,21,22,26,35,39,51,52,53,57,59,63,67,68,69,70,71,72,83,],[-28,-13,48,-27,-28,48,-25,-28,-24,48,48,-26,48,48,-19,-20,-21,-22,48,]),'TIMES':([15,21,22,26,35,39,51,52,53,57,59,63,67,68,69,70,71,72,83,],[-28,-13,49,-27,-28,49,-25,-28,-24,49,49,-26,49,49,-19,-20,-21,-22,49,]),'POWER':([15,21,22,26,35,39,51,52,53,57,59,63,67,68,69,70,71,72,83,],[-28,-13,50,-27,-28,50,-25,-28,-24,50,50,-26,50,50,50,50,50,50,50,]),'RPAREN':([19,21,22,23,26,35,37,38,39,40,41,42,43,51,52,53,57,59,60,61,63,64,65,67,68,69,70,71,72,85,86,87,],[-52,-13,-14,-15,-27,-16,-52,62,63,-46,-52,-50,-51,-25,-28,-24,-23,63,80,-42,-26,-47,-48,-17,-18,-19,-20,-21,-22,-43,-16,-49,]),'STRING_LITERAL':([19,82,],[43,43,]),'COMMA':([21,22,23,26,35,37,39,41,42,43,51,52,53,57,60,61,63,64,65,67,68,69,70,71,72,85,86,87,],[-13,-14,-15,-27,-16,-52,-14,-52,-50,-51,-25,-28,-24,-23,81,-42,-26,82,-48,-17,-18,-19,-20,-21,-22,-43,-16,-49,]),'INT':([32,],[56,]),'ELSE':([54,58,],[-4,79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_stmt':([0,3,34,44,55,79,],[2,9,58,66,9,84,]),'stmt_decl_list':([3,],[4,]),'epsilon':([3,4,6,19,37,41,56,58,],[5,28,31,40,61,65,75,78,]),'stmt_decl':([3,55,],[6,73,]),'stmt':([3,55,],[7,7,]),'decleration':([3,55,],[8,8,]),'expr_stmt':([3,55,],[10,10,]),'if_stmt':([3,55,],[11,11,]),'read_stmt':([3,55,],[12,12,]),'while_stmt':([3,55,],[13,13,]),'write_stmt':([3,55,],[14,14,]),'identifier':([3,17,19,20,24,25,33,36,45,46,47,48,49,50,55,76,81,82,],[15,35,35,35,52,52,52,52,52,52,52,52,52,52,15,52,86,35,]),'expr':([3,17,19,20,55,82,],[16,34,42,44,16,42,]),'expression':([3,17,19,20,24,25,33,36,45,46,47,48,49,50,55,76,82,],[22,22,39,22,51,53,57,59,67,68,69,70,71,72,22,83,22,]),'lvalue':([3,17,19,20,55,81,82,],[23,23,23,23,23,85,23,]),'semicolon_opt':([4,],[27,]),'stmt_decl_list_opt':([6,],[30,]),'write_opt':([19,],[38,]),'expr_string':([19,82,],[41,87,]),'read_opt':([37,],[60,]),'expr_string_opt':([41,],[64,]),'assignment_opt':([56,],[74,]),'else_opt':([58,],[77,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_stmt','program',1,'p_program','miniFrontEnd.py',123),
  ('stmt_decl_list -> epsilon','stmt_decl_list',1,'p_stmt_decl_list','miniFrontEnd.py',126),
  ('stmt_decl_list -> stmt_decl stmt_decl_list_opt','stmt_decl_list',2,'p_stmt_decl_list','miniFrontEnd.py',127),
  ('block_stmt -> LBRACKET stmt_decl_list semicolon_opt RBRACKET','block_stmt',4,'p_block_stmt','miniFrontEnd.py',130),
  ('stmt_decl_list_opt -> epsilon','stmt_decl_list_opt',1,'p_stmt_decl_list_opt','miniFrontEnd.py',133),
  ('stmt_decl_list_opt -> stmt_decl_list_opt SEMICOLON stmt_decl','stmt_decl_list_opt',3,'p_stmt_decl_list_opt','miniFrontEnd.py',134),
  ('stmt_decl -> stmt','stmt_decl',1,'p_stmt_decl','miniFrontEnd.py',138),
  ('stmt_decl -> decleration','stmt_decl',1,'p_stmt_decl','miniFrontEnd.py',139),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',142),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',143),
  ('decleration -> identifier COLON INT assignment_opt','decleration',4,'p_decleration','miniFrontEnd.py',151),
  ('type -> INT','type',1,'p_type','miniFrontEnd.py',154),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',158),
  ('expr -> expression','expr',1,'p_expr','miniFrontEnd.py',165),
  ('expr -> lvalue','expr',1,'p_expr','miniFrontEnd.py',166),
  ('lvalue -> identifier','lvalue',1,'p_lvalue','miniFrontEnd.py',169),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',173),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',174),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',175),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',176),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','miniFrontEnd.py',177),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','miniFrontEnd.py',178),
  ('expression -> identifier ASSIGN expression','expression',3,'p_expression_binop','miniFrontEnd.py',179),
  ('expression -> MINUS expression','expression',2,'p_expression_unop','miniFrontEnd.py',183),
  ('expression -> PLUS expression','expression',2,'p_expression_unop','miniFrontEnd.py',184),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',188),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',193),
  ('expression -> identifier','expression',1,'p_expression_id','miniFrontEnd.py',198),
  ('assignment_opt -> epsilon','assignment_opt',1,'p_assignment_opt','miniFrontEnd.py',202),
  ('assignment_opt -> ASSIGN expression','assignment_opt',2,'p_assignment_opt','miniFrontEnd.py',203),
  ('stmt -> block_stmt','stmt',1,'p_stmt','miniFrontEnd.py',206),
  ('stmt -> expr_stmt','stmt',1,'p_stmt','miniFrontEnd.py',207),
  ('stmt -> if_stmt','stmt',1,'p_stmt','miniFrontEnd.py',208),
  ('stmt -> read_stmt','stmt',1,'p_stmt','miniFrontEnd.py',209),
  ('stmt -> while_stmt','stmt',1,'p_stmt','miniFrontEnd.py',210),
  ('stmt -> write_stmt','stmt',1,'p_stmt','miniFrontEnd.py',211),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','miniFrontEnd.py',214),
  ('if_stmt -> IF expr block_stmt else_opt','if_stmt',4,'p_if_stmt','miniFrontEnd.py',217),
  ('else_opt -> epsilon','else_opt',1,'p_else_opt','miniFrontEnd.py',220),
  ('else_opt -> ELSE block_stmt','else_opt',2,'p_else_opt','miniFrontEnd.py',221),
  ('read_stmt -> READ LPAREN read_opt RPAREN','read_stmt',4,'p_read_stmt','miniFrontEnd.py',224),
  ('read_opt -> epsilon','read_opt',1,'p_read_opt','miniFrontEnd.py',227),
  ('read_opt -> read_opt COMMA lvalue','read_opt',3,'p_read_opt','miniFrontEnd.py',228),
  ('while_stmt -> WHILE expr block_stmt','while_stmt',3,'p_while_stmt','miniFrontEnd.py',231),
  ('write_stmt -> LPAREN write_opt RPAREN','write_stmt',3,'p_write_stmt','miniFrontEnd.py',234),
  ('write_opt -> epsilon','write_opt',1,'p_write_opt','miniFrontEnd.py',236),
  ('write_opt -> expr_string expr_string_opt','write_opt',2,'p_write_opt','miniFrontEnd.py',237),
  ('expr_string_opt -> epsilon','expr_string_opt',1,'p_expr_string_opt','miniFrontEnd.py',240),
  ('expr_string_opt -> expr_string_opt COMMA expr_string','expr_string_opt',3,'p_expr_string_opt','miniFrontEnd.py',241),
  ('expr_string -> expr','expr_string',1,'p_expr_string','miniFrontEnd.py',244),
  ('expr_string -> STRING_LITERAL','expr_string',1,'p_expr_string','miniFrontEnd.py',245),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',252),
]
