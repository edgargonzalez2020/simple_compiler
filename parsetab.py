
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightASSIGNleftORleftANDleftEQUALSNEnonassocLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEMODULUSleftNOTrightPOWERrightUMINUSUPLUSAND ASSIGN COLON COMMA DIVIDE ELSE EQUALS GT GTE ID IF INT INT_LITERAL LBRACE LPAREN LT LTE MINUS MODULUS NE NOT OR PLUS POWER RBRACE READ RPAREN SEMICOLON STRING_LITERAL TIMES WHILE WRITEprogram : block_stmtblock_stmt : LBRACE stmt_decl_list RBRACEstmt_decl_list : epsilon\n                      | stmt_decl_list_more stmt_decl semicolon_optstmt_decl_list_more : epsilon\n                           | stmt_decl_list_more stmt_decl SEMICOLONstmt_decl : stmt\n                 | declerationsemicolon_opt : epsilon\n                     | SEMICOLONdecleration : identifier COLON type assignment_opttype : INTidentifier : IDlvalue : identifier expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression DIVIDE expression\n                  | expression MODULUS expression\n                  | expression TIMES expression\n                  | expression POWER expression\n                  | expression LT expression\n                  | expression LTE expression\n                  | expression GT expression\n                  | expression GTE expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQUALS expression\n                  | expression NE expression\n                  | lvalue ASSIGN expression\n                   expression : MINUS expression %prec UMINUS\n                   | PLUS expression %prec UPLUS\n                   | NOT expressionexpression : LPAREN expression RPARENliteral : STRING_LITERAL\n               | INT_LITERALexpression : literal\n                  | lvalueassignment_opt : epsilon\n                      | ASSIGN expressionexpr_stmt : expressionstmt : block_stmt\n            | expr_stmt\n            | if_stmt\n            | read_stmt\n            | while_stmt\n            | write_stmtif_stmt : IF expression block_stmt else_optelse_opt : epsilon\n                | ELSE block_stmtread_stmt : READ LPAREN lvalue_list RPARENlvalue_list : lvalue_more lvaluelvalue_more : epsilon\n                   | lvalue_more lvalue COMMA while_stmt : WHILE expression block_stmtwrite_stmt : WRITE LPAREN expr_string_list RPARENexpr_string_list : epsilon\n                        | expr_string_more expressionexpr_string_more : epsilon\n                        | expr_string_more expression COMMAepsilon :'
    
_lr_action_items = {'LBRACE':([0,3,5,6,24,27,29,30,31,33,50,51,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,91,],[3,-60,-5,3,-13,-37,-36,-34,-35,-6,3,-14,3,-31,-30,-32,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-33,-29,3,]),'$end':([1,2,7,],[0,-1,-2,]),'RBRACE':([3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,24,27,29,30,31,32,33,34,51,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,81,85,86,87,89,90,92,94,96,97,],[-60,7,-3,-2,-60,-7,-8,-41,-42,-43,-44,-45,-46,-14,-40,-13,-37,-36,-34,-35,-4,-10,-9,-14,-31,-30,-32,-60,-12,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-60,-33,-54,-29,-11,-38,-47,-48,-50,-55,-39,-49,]),'IF':([3,5,6,33,],[-60,-5,19,-6,]),'READ':([3,5,6,33,],[-60,-5,20,-6,]),'WHILE':([3,5,6,33,],[-60,-5,22,-6,]),'WRITE':([3,5,6,33,],[-60,-5,23,-6,]),'ID':([3,5,6,19,21,22,25,26,28,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,55,58,78,79,83,84,88,98,99,],[-60,-5,24,24,24,24,24,24,24,-6,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-60,-60,24,24,-52,-58,24,24,-53,-59,]),'MINUS':([3,5,6,17,18,19,21,22,24,25,26,27,28,29,30,31,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,83,84,85,88,95,96,99,],[-60,-5,26,-14,37,26,26,26,-13,26,26,-37,26,-36,-34,-35,-6,26,26,26,26,26,26,26,26,26,26,26,26,26,26,37,-14,37,37,-60,-31,-30,26,-32,-15,-16,-17,-18,-19,-20,37,37,37,37,37,37,37,37,-33,-58,26,37,26,37,37,-59,]),'PLUS':([3,5,6,17,18,19,21,22,24,25,26,27,28,29,30,31,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,83,84,85,88,95,96,99,],[-60,-5,25,-14,36,25,25,25,-13,25,25,-37,25,-36,-34,-35,-6,25,25,25,25,25,25,25,25,25,25,25,25,25,25,36,-14,36,36,-60,-31,-30,25,-32,-15,-16,-17,-18,-19,-20,36,36,36,36,36,36,36,36,-33,-58,25,36,25,36,36,-59,]),'NOT':([3,5,6,19,21,22,25,26,28,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,55,58,83,84,88,99,],[-60,-5,28,28,28,28,28,28,28,-6,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-60,28,-58,28,28,-59,]),'LPAREN':([3,5,6,19,20,21,22,23,25,26,28,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,55,58,83,84,88,99,],[-60,-5,21,21,52,21,21,55,21,21,21,-6,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-60,21,-58,21,21,-59,]),'STRING_LITERAL':([3,5,6,19,21,22,25,26,28,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,55,58,83,84,88,99,],[-60,-5,30,30,30,30,30,30,30,-6,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-60,30,-58,30,30,-59,]),'INT_LITERAL':([3,5,6,19,21,22,25,26,28,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,55,58,83,84,88,99,],[-60,-5,31,31,31,31,31,31,31,-6,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-60,31,-58,31,31,-59,]),'SEMICOLON':([7,8,9,10,11,12,13,14,15,16,17,18,24,27,29,30,31,51,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,81,85,86,87,89,90,92,94,96,97,],[-2,33,-7,-8,-41,-42,-43,-44,-45,-46,-14,-40,-13,-37,-36,-34,-35,-14,-31,-30,-32,-60,-12,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-60,-33,-54,-29,-11,-38,-47,-48,-50,-55,-39,-49,]),'ELSE':([7,76,],[-2,91,]),'COLON':([17,24,],[35,-13,]),'ASSIGN':([17,24,27,51,60,61,],[-14,-13,58,-14,88,-12,]),'DIVIDE':([17,18,24,27,29,30,31,50,51,53,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,95,96,],[-14,38,-13,-37,-36,-34,-35,38,-14,38,38,-31,-30,-32,38,38,-17,-18,-19,-20,38,38,38,38,38,38,38,38,-33,38,38,38,]),'MODULUS':([17,18,24,27,29,30,31,50,51,53,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,95,96,],[-14,39,-13,-37,-36,-34,-35,39,-14,39,39,-31,-30,-32,39,39,-17,-18,-19,-20,39,39,39,39,39,39,39,39,-33,39,39,39,]),'TIMES':([17,18,24,27,29,30,31,50,51,53,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,95,96,],[-14,40,-13,-37,-36,-34,-35,40,-14,40,40,-31,-30,-32,40,40,-17,-18,-19,-20,40,40,40,40,40,40,40,40,-33,40,40,40,]),'POWER':([17,18,24,27,29,30,31,50,51,53,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,95,96,],[-14,41,-13,-37,-36,-34,-35,41,-14,41,41,-31,-30,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-33,41,41,41,]),'LT':([17,18,24,27,29,30,31,50,51,53,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,95,96,],[-14,42,-13,-37,-36,-34,-35,42,-14,42,42,-31,-30,-32,-15,-16,-17,-18,-19,-20,None,None,None,None,42,42,42,42,-33,42,42,42,]),'LTE':([17,18,24,27,29,30,31,50,51,53,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,95,96,],[-14,43,-13,-37,-36,-34,-35,43,-14,43,43,-31,-30,-32,-15,-16,-17,-18,-19,-20,None,None,None,None,43,43,43,43,-33,43,43,43,]),'GT':([17,18,24,27,29,30,31,50,51,53,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,95,96,],[-14,44,-13,-37,-36,-34,-35,44,-14,44,44,-31,-30,-32,-15,-16,-17,-18,-19,-20,None,None,None,None,44,44,44,44,-33,44,44,44,]),'GTE':([17,18,24,27,29,30,31,50,51,53,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,95,96,],[-14,45,-13,-37,-36,-34,-35,45,-14,45,45,-31,-30,-32,-15,-16,-17,-18,-19,-20,None,None,None,None,45,45,45,45,-33,45,45,45,]),'AND':([17,18,24,27,29,30,31,50,51,53,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,95,96,],[-14,46,-13,-37,-36,-34,-35,46,-14,46,46,-31,-30,-32,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,46,-27,-28,-33,46,46,46,]),'OR':([17,18,24,27,29,30,31,50,51,53,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,95,96,],[-14,47,-13,-37,-36,-34,-35,47,-14,47,47,-31,-30,-32,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-33,47,47,47,]),'EQUALS':([17,18,24,27,29,30,31,50,51,53,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,95,96,],[-14,48,-13,-37,-36,-34,-35,48,-14,48,48,-31,-30,-32,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,48,48,-27,-28,-33,48,48,48,]),'NE':([17,18,24,27,29,30,31,50,51,53,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,95,96,],[-14,49,-13,-37,-36,-34,-35,49,-14,49,49,-31,-30,-32,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,49,49,-27,-28,-33,49,49,49,]),'RPAREN':([24,27,29,30,31,51,53,55,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,82,83,85,93,95,],[-13,-37,-36,-34,-35,-14,80,-60,-31,-30,-32,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,92,-33,94,-56,-29,-51,-57,]),'COMMA':([24,27,29,30,31,51,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,93,95,],[-13,-37,-36,-34,-35,-14,-31,-30,-32,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-33,-29,98,99,]),'INT':([35,],[61,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_stmt':([0,6,50,54,91,],[2,11,76,81,97,]),'stmt_decl_list':([3,],[4,]),'epsilon':([3,8,52,55,60,76,],[5,34,79,83,87,90,]),'stmt_decl_list_more':([3,],[6,]),'stmt_decl':([6,],[8,]),'stmt':([6,],[9,]),'decleration':([6,],[10,]),'expr_stmt':([6,],[12,]),'if_stmt':([6,],[13,]),'read_stmt':([6,],[14,]),'while_stmt':([6,],[15,]),'write_stmt':([6,],[16,]),'identifier':([6,19,21,22,25,26,28,36,37,38,39,40,41,42,43,44,45,46,47,48,49,58,78,84,88,],[17,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'expression':([6,19,21,22,25,26,28,36,37,38,39,40,41,42,43,44,45,46,47,48,49,58,84,88,],[18,50,53,54,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,95,96,]),'lvalue':([6,19,21,22,25,26,28,36,37,38,39,40,41,42,43,44,45,46,47,48,49,58,78,84,88,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,93,27,27,]),'literal':([6,19,21,22,25,26,28,36,37,38,39,40,41,42,43,44,45,46,47,48,49,58,84,88,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'semicolon_opt':([8,],[32,]),'type':([35,],[60,]),'lvalue_list':([52,],[77,]),'lvalue_more':([52,],[78,]),'expr_string_list':([55,],[82,]),'expr_string_more':([55,],[84,]),'assignment_opt':([60,],[86,]),'else_opt':([76,],[89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_stmt','program',1,'p_program','miniFrontEnd.py',135),
  ('block_stmt -> LBRACE stmt_decl_list RBRACE','block_stmt',3,'p_block_stmt','miniFrontEnd.py',138),
  ('stmt_decl_list -> epsilon','stmt_decl_list',1,'p_stmt_decl_list','miniFrontEnd.py',142),
  ('stmt_decl_list -> stmt_decl_list_more stmt_decl semicolon_opt','stmt_decl_list',3,'p_stmt_decl_list','miniFrontEnd.py',143),
  ('stmt_decl_list_more -> epsilon','stmt_decl_list_more',1,'p_stmt_decl_list_more','miniFrontEnd.py',150),
  ('stmt_decl_list_more -> stmt_decl_list_more stmt_decl SEMICOLON','stmt_decl_list_more',3,'p_stmt_decl_list_more','miniFrontEnd.py',151),
  ('stmt_decl -> stmt','stmt_decl',1,'p_stmt_decl','miniFrontEnd.py',158),
  ('stmt_decl -> decleration','stmt_decl',1,'p_stmt_decl','miniFrontEnd.py',159),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',162),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',163),
  ('decleration -> identifier COLON type assignment_opt','decleration',4,'p_decleration','miniFrontEnd.py',171),
  ('type -> INT','type',1,'p_type','miniFrontEnd.py',175),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',179),
  ('lvalue -> identifier','lvalue',1,'p_lvalue','miniFrontEnd.py',187),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',191),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',192),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',193),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',194),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','miniFrontEnd.py',195),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','miniFrontEnd.py',196),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','miniFrontEnd.py',197),
  ('expression -> expression LTE expression','expression',3,'p_expression_binop','miniFrontEnd.py',198),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','miniFrontEnd.py',199),
  ('expression -> expression GTE expression','expression',3,'p_expression_binop','miniFrontEnd.py',200),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','miniFrontEnd.py',201),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','miniFrontEnd.py',202),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_binop','miniFrontEnd.py',203),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','miniFrontEnd.py',204),
  ('expression -> lvalue ASSIGN expression','expression',3,'p_expression_binop','miniFrontEnd.py',205),
  ('expression -> MINUS expression','expression',2,'p_expression_unop','miniFrontEnd.py',211),
  ('expression -> PLUS expression','expression',2,'p_expression_unop','miniFrontEnd.py',212),
  ('expression -> NOT expression','expression',2,'p_expression_unop','miniFrontEnd.py',213),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',218),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','miniFrontEnd.py',223),
  ('literal -> INT_LITERAL','literal',1,'p_literal','miniFrontEnd.py',224),
  ('expression -> literal','expression',1,'p_expression_int_literal','miniFrontEnd.py',228),
  ('expression -> lvalue','expression',1,'p_expression_int_literal','miniFrontEnd.py',229),
  ('assignment_opt -> epsilon','assignment_opt',1,'p_assignment_opt','miniFrontEnd.py',234),
  ('assignment_opt -> ASSIGN expression','assignment_opt',2,'p_assignment_opt','miniFrontEnd.py',235),
  ('expr_stmt -> expression','expr_stmt',1,'p_expr_stmt','miniFrontEnd.py',239),
  ('stmt -> block_stmt','stmt',1,'p_stmt','miniFrontEnd.py',242),
  ('stmt -> expr_stmt','stmt',1,'p_stmt','miniFrontEnd.py',243),
  ('stmt -> if_stmt','stmt',1,'p_stmt','miniFrontEnd.py',244),
  ('stmt -> read_stmt','stmt',1,'p_stmt','miniFrontEnd.py',245),
  ('stmt -> while_stmt','stmt',1,'p_stmt','miniFrontEnd.py',246),
  ('stmt -> write_stmt','stmt',1,'p_stmt','miniFrontEnd.py',247),
  ('if_stmt -> IF expression block_stmt else_opt','if_stmt',4,'p_if_stmt','miniFrontEnd.py',251),
  ('else_opt -> epsilon','else_opt',1,'p_else_opt','miniFrontEnd.py',255),
  ('else_opt -> ELSE block_stmt','else_opt',2,'p_else_opt','miniFrontEnd.py',256),
  ('read_stmt -> READ LPAREN lvalue_list RPAREN','read_stmt',4,'p_read_stmt','miniFrontEnd.py',260),
  ('lvalue_list -> lvalue_more lvalue','lvalue_list',2,'p_lvalue_list','miniFrontEnd.py',264),
  ('lvalue_more -> epsilon','lvalue_more',1,'p_lvalue_more','miniFrontEnd.py',268),
  ('lvalue_more -> lvalue_more lvalue COMMA','lvalue_more',3,'p_lvalue_more','miniFrontEnd.py',269),
  ('while_stmt -> WHILE expression block_stmt','while_stmt',3,'p_while_stmt','miniFrontEnd.py',273),
  ('write_stmt -> WRITE LPAREN expr_string_list RPAREN','write_stmt',4,'p_write_stmt','miniFrontEnd.py',276),
  ('expr_string_list -> epsilon','expr_string_list',1,'p_expr_string_list','miniFrontEnd.py',280),
  ('expr_string_list -> expr_string_more expression','expr_string_list',2,'p_expr_string_list','miniFrontEnd.py',281),
  ('expr_string_more -> epsilon','expr_string_more',1,'p_expr_string_more','miniFrontEnd.py',285),
  ('expr_string_more -> expr_string_more expression COMMA','expr_string_more',3,'p_expr_string_more','miniFrontEnd.py',286),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',294),
]
